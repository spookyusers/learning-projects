classdef topenAIFunction < matlab.unittest.TestCase
% Tests for openAIFunction

%   Copyright 2023 The MathWorks, Inc.    

    properties(TestParameter)
        InvalidInputsConstructor = iGetInvalidInputsConstructor;
        InvalidInputsaddParameter = iGetInvalidInputsaddParameter;
        ValidProperties = iGetValidProperties;
    end

    methods(Test)

        function testCreateFunctionWithDescription(testCase)
            name = "functionName";
            description = "description here";
            funObj = openAIFunction(name,description);
            testCase.verifyEqual(funObj.FunctionName, name);
            testCase.verifyEqual(funObj.Description, description);
        end

        function testCreateFunctionWithoutDescription(testCase)
            name = "functionName";
            funObj = openAIFunction(name);
            testCase.verifyEqual(funObj.FunctionName, name);
            testCase.verifyEmpty(funObj.Description);
        end

        function testParametersAreAdded(testCase)
            funObj = openAIFunction("getCurrentWeather");

            funObj = addParameter(funObj, "location", type="string", description="City and state.");
            funObj = addParameter(funObj, "format", type="string", enum=["celsius", "fahrenheit"]);

            parameters = struct("location", struct("type", "string", "description", "City and state.", "required", true), ...
                "format", struct("type", "string", "enum", ["celsius", "fahrenheit"], "required", true));

            testCase.verifyEqual(funObj.Parameters, parameters);
        end

        function testValidProperties(testCase, ValidProperties)
            funObj = openAIFunction("functionName");
            testCase.verifyWarningFree(@()addParameter(funObj, "parameterName", ValidProperties{:}));
        end

        function testValidOutputStructWithParameters(testCase)
            % Format expected from OpenAI 
            expectedStruct = struct("name", "getCurrentWeather",...
                "parameters", struct("type", "object", ...
                    "properties", struct( ...
                        "location", struct("type", "string", ...
                            "description", "City and state."), ...
                        "format", struct("type", "string",...
                            "enum", ["celsius", "fahrenheit"], ...
                            "description", "Temperature unit to use.")), ...
                     "required", ["location", "format"]));

            funObj = openAIFunction("getCurrentWeather");

            funObj = addParameter(funObj, "location", type="string", ...
                description="City and state.");
            funObj = addParameter(funObj, "format", type="string", ...
                enum=["celsius", "fahrenheit"], description="Temperature unit to use.");

            testCase.verifyEqual(encodeStruct(funObj), expectedStruct);
        end

        function testValidOutputStructWithoutParameters(testCase)
            expectedStruct = struct("name", "getCurrentWeather",...
                "parameters", struct("type", "object", ...
                    "properties", struct()));

            funObj = openAIFunction("getCurrentWeather");

            testCase.verifyEqual(encodeStruct(funObj), expectedStruct);
        end

        function testValidOutputStructWithoutArgumentProperties(testCase)
            expectedStruct = struct("name", "getCurrentWeather",...
                "parameters", struct("type", "object", ...
                    "properties", struct( ...
                        "location", struct(), ...
                        "format", struct()), ...
                     "required", ["location", "format"]));

            funObj = openAIFunction("getCurrentWeather");

            funObj = addParameter(funObj, "location");
            funObj = addParameter(funObj, "format");

            testCase.verifyEqual(encodeStruct(funObj), expectedStruct);
        end

        function singleRequiredArgumentGetsConvertedToArray(testCase)
            expectedJson = ['{"name":"getCurrentWeather","parameters":' ...
                '{"type":"object","properties":{"location":{}},"required":["location"]}}'];

            funObj = openAIFunction("getCurrentWeather");
            funObj = addParameter(funObj, "location");

            testCase.verifyEqual(jsonencode(encodeStruct(funObj)), expectedJson);
        end

        function singleEnumGetsConvertedToArray(testCase)
            expectedJson = '{"location":{"enum":["Paris"]}}';

            funObj = openAIFunction("getCurrentWeather");
            funObj = addParameter(funObj, "location", enum="Paris");

            paramsStruct = encodeStruct(funObj);

            testCase.verifyEqual(jsonencode(paramsStruct.parameters.properties), expectedJson);
        end

        function parameterMustBeUnique(testCase)
            funObj = openAIFunction("getCurrentWeather");
            funObj = addParameter(funObj, "location");
            testCase.verifyError(@()addParameter(funObj, "location"),"llms:parameterMustBeUnique");            
        end

        function testInvalidInputsConstructor(testCase, InvalidInputsConstructor)
            testCase.verifyError(@()openAIFunction(InvalidInputsConstructor.Input{:}), InvalidInputsConstructor.Error);
        end

        function testInvalidInputsAddParameter(testCase, InvalidInputsaddParameter)
            name = "functionName";
            description = "description here";
            funObj = openAIFunction(name,description);
            testCase.verifyError(@()addParameter(funObj,InvalidInputsaddParameter.Input{:}), InvalidInputsaddParameter.Error);
        end
    end
end

function validProperties = iGetValidProperties
validProperties = struct( ...
    "ValidType", {{"type", "string"}},...
    "ValidTypeCombination", {{"type", ["string", "number"]}},...
    "ValidEnum", {{"enum", ["cat", "dog"]}},...
    "ValidDescription", {{"description", "This is a description"}},...
    "ValidCombination", {{"type", "string",...
    "enum", ["cat","dog"],...
    "description", "Your favorite animal"}});
end

function invalidInputsAddParameter = iGetInvalidInputsaddParameter
invalidInputsAddParameter = struct( ...
    "NonTextName", ...
        struct("Input", {{123}}, ...
            "Error", "MATLAB:validators:mustBeNonzeroLengthText"), ...
    ...
    "NonScalarName", ...
        struct("Input", {{["name1" "name2"]}}, ...
            "Error", "MATLAB:validation:IncompatibleSize"), ...
    ...
    "ParameterStartingWith_", ...
        struct("Input", {{"_invalid"}}, ...
            "Error", "llms:mustBeVarName"), ...
    ...
    "ParameterStartingWithDigit", ...
        struct("Input", {{"1nvalid"}}, ...
            "Error", "llms:mustBeVarName"), ...
    ...
    "InvalidRequiredParameterValue", ...
        struct("Input", {{"parameterName", "RequiredParameter", "a"}}, ...
            "Error", "MATLAB:validation:UnableToConvert"), ...
    ...
    "NonTextPropertyName", ...
        struct("Input", {{"parameterName", 123, "description"}}, ...
            "Error", "MATLAB:validators:mustBeNonzeroLengthText"),...
    ...
    "InvalidValuePropertyName", ...
        struct("Input", {{"parameterName", "propName", "bla"}}, ...
            "Error", "MATLAB:validators:mustBeMember"),...
    ...
    "InvalidSizePropertyName", ...
        struct("Input", {{"parameterName", ["type","type"], "string"}}, ...
            "Error", "MATLAB:validation:IncompatibleSize"),...
    ...
    "InvalidValueType", ...
        struct("Input", {{"parameterName", "type", "stringssss"}}, ...
            "Error", "MATLAB:validators:mustBeMember"),...
    ...
    "InvalidTypeForType", ...
        struct("Input", {{"parameterName", "type", 123}}, ...
            "Error", "MATLAB:validators:mustBeNonzeroLengthText"),...
    ...
    "EnumShouldBeVector", ...
        struct("Input", {{"parameterName", "enum", ["a","b";"c","d"]}}, ...
            "Error", "MATLAB:validation:IncompatibleSize"),...
    ...
    "EnumShouldBeUnique", ...
        struct("Input", {{"parameterName", "enum", ["a","b", "a"]}}, ...
            "Error", "llms:mustBeUnique"),...
    ...
    "InvalidTypeDescription", ...
        struct("Input", {{"parameterName", "description", 123}}, ...
            "Error", "MATLAB:validators:mustBeNonzeroLengthText"));
end

function invalidInputsConstructor = iGetInvalidInputsConstructor
invalidInputsConstructor = struct( ...
    "NonTextName", ...
        struct("Input", {{123}}, ...
            "Error", "MATLAB:validators:mustBeNonzeroLengthText"), ...
    ...
    "NonTextDescription", ...
        struct("Input", {{"functionName", 123}}, ...
            "Error", "MATLAB:validators:mustBeTextScalar"), ...
    ...
    "NonScalarName", ...
        struct("Input", {{["name1" "name2"]}}, ...
            "Error", "MATLAB:validation:IncompatibleSize"), ...
    ...
    "NonScalarDescription", ...
        struct("Input", {{"functionName", ["desc1" "desc2"]}}, ...
            "Error", "MATLAB:validators:mustBeTextScalar"));
end